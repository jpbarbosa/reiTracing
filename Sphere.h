#ifndef _H_Sphere#define _H_Sphere/* Needed libraries. */#include <cmath>/* Defines the needed classes and their headers. */class Ray;#include "Ray.h"#include "BasicStructures.h"class Object{protected:        /* The centre of the object. */	point centre;	/* The colour of this object. */	colour c;	/* Coeficients used for the Lambert and Blinn-Phong Effects. */	double reflection, shininess;	colour diffuse, specular;public:        /* - - - - - - - CONSTRUCTOR & DESTRUCTOR - - - - - - - -*/        explicit Object(double x, double y, double z, double rC, double gC, double bC);        explicit Object();	/* - - - - - - - OTHER METHODS - - - - - - - -*/	/* Determinates whether the ray intersects this sphere or not. */	virtual bool intersects(Ray &ray, double &t);	/* - - - - - - - GETTERS & SETTERS - - - - - - - -*/        double getR();	double getG();	double getB();	double getReflection();	double getShininess();	colour getSpecular();	colour getDiffuse();	void setReflection(double v);	void setShininess(double v);	void setSpecularR(double v);	void setSpecularG(double v);	void setSpecularB(double v);	void setDiffuseR(double v);	void setDiffuseG(double v);	void setDiffuseB(double v);};/* Header for the Sphere class. */class Sphere: public Object{private:	/* - - - - - - - - - - - - ATTRIBUTES - - - - - - - - - -*/        /* The radius of the sphere. */	double radius;public:	/* - - - - - - - CONSTRUCTOR & DESTRUCTOR - - - - - - - -*/	/* Constructor & destructor. */	explicit Sphere(double x, double y, double z, double rad, double rC, double gC, double bC);	explicit Sphere();	~Sphere();	/* - - - - - - - OTHER METHODS - - - - - - - -*/	/* Determinates whether the ray intersects this sphere or not. */	bool intersects(Ray &ray, double &t);		/* - - - - - - - GETTERS & SETTERS - - - - - - - -*/	point getCentre();	double getRadius();};#endif