#ifndef _BASIC_STRUCTURES_H#define _BASIC_STRUCTURES_Hconst double PIOVER180 = 0.017453292519943295769236907684886;/* The RGB colour of a given pixel in the screen. */ struct pixelColour{	float r, g, b;};struct point {	double x, y, z;		point& operator += (const point &p2){	    this->x += p2.x;        this->y += p2.y;        this->z += p2.z;	    return *this;    }};struct vector {	double x, y, z;    vector& operator += (const vector &v2){	    this->x += v2.x;        this->y += v2.y;        this->z += v2.z;	    return *this;    }		vector& operator /= (double c){	    this->x /= c;        this->y /= c;        this->z /= c;	    return *this;    }};inline point operator * (double t, const point &p) {	point p2 = {p.x * t, p.y*t, p.z* t};	return p2;}inline double operator * (const point &p,const point &p2) {	double t = p.x * p2.x + p.y * p2.y + p.z * p2.z;	return t;}inline point operator + (const point&p, const vector &v){	point p2={p.x + v.x, p.y + v.y, p.z + v.z };	return p2;}inline point operator - (const point&p, const vector &v){	point p2={p.x - v.x, p.y - v.y, p.z - v.z };	return p2;}inline vector operator + (const vector &v1, const vector &v2){	vector v={v1.x + v2.x, v1.y + v2.y, v1.z + v2.z };	return v;}inline vector operator - (const point &p1, const point &p2){	vector v={p1.x - p2.x, p1.y - p2.y, p1.z - p2.z };	return v;}inline vector operator * (double c, const vector &v){	vector v2={v.x *c, v.y * c, v.z * c };	return v2;}inline vector operator / (double c, const vector &v){	vector v2={v.x / c, v.y / c, v.z / c };	return v2;}inline vector operator - (const vector &v1, const vector &v2){	vector v={v1.x - v2.x, v1.y - v2.y, v1.z - v2.z };	return v;}inline double operator * (const vector &v1, const vector &v2 ) {	return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;}struct color {    enum OFFSET     {        OFFSET_RED = 0,        OFFSET_GREEN = 1,        OFFSET_BLUE = 2,        OFFSET_MAX  = 3    };    float red, green, blue;    inline color & operator += (const color &c2 ) {	    this->red +=  c2.red;        this->green += c2.green;        this->blue += c2.blue;	    return *this;    }    inline float & getChannel(OFFSET offset )    {        return reinterpret_cast<float*>(this)[offset];    }    inline float getChannel(OFFSET offset ) const    {        return reinterpret_cast<const float*>(this)[offset];    }};inline color operator * (const color&c1, const color &c2 ) {	color c = {c1.red * c2.red, c1.green * c2.green, c1.blue * c2.blue};	return c;}inline color operator + (const color&c1, const color &c2 ) {	color c = {c1.red + c2.red, c1.green + c2.green, c1.blue + c2.blue};	return c;}inline color operator * (double coef, const color &c ) {	color c2 = {c.red * coef, c.green * coef, c.blue * coef};	return c2;}#endif //__DEF_H