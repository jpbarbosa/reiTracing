#ifndef _H_Ray#define _H_Ray/* Needed libraries. */#include <string>/* Defines the needed classes and their headers. */class Sphere;#include "Sphere.h"#include "BasicStructures.h"/* Header for the Ray class. */class Ray{private:	/* - - - - - - - - - - - - ATTRIBUTES - - - - - - - - - -*/	/* The starting point of the ray and its direction. */	double initX, initY, initZ;		double xDir, yDir, zDir;	/* The corresponding pixel in the final image for this ray. */	int wPos, hPos;	/* The colour for this ray. */	double r, g, b;public:	/* - - - - - - - CONSTRUCTOR & DESTRUCTOR - - - - - - - -*/	/* Constructor & destructor. */	explicit Ray(double x, double y, double z, int w, int h);	~Ray();	/* - - - - - - - OTHER METHODS - - - - - - - -*/	void setDirection(double x, double y, double z);	void normalize();	/* Sets the new direction of the ray after an intersection. */	void newDirection(double t, Sphere &sphere);		/* - - - - - - - GETTERS & SETTERS - - - - - - - -*/	int getWPos();	int getHPos();	double getXDir();	double getYDir();	double getZDir();	double getInitX();	double getInitY();	double getInitZ();	void setXDir(double v);	void setYDir(double v);	void setZDir(double v);	void setInitX(double v);	void setInitY(double v);	void setInitZ(double v);		double getR();	double getG();	double getB();	void setColour(double rC, double gC, double bC);	void updateR(double per);	void updateG(double per);	void updateB(double per);};#endif